// <auto-generated />
using System;
using MediMove.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediMove.Server.Migrations
{
    [DbContext(typeof(MediMoveDbContext))]
    partial class MediMoveDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MediMove.Server.Application.Models.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParamedicId")
                        .HasColumnType("int");

                    b.Property<int?>("ShiftType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParamedicId");

                    b.ToTable("Availabilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Day = new DateTime(2023, 6, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 1,
                            ShiftType = 0
                        },
                        new
                        {
                            Id = 2,
                            Day = new DateTime(2023, 6, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 3
                        },
                        new
                        {
                            Id = 3,
                            Day = new DateTime(2023, 6, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 4,
                            ShiftType = 1
                        },
                        new
                        {
                            Id = 4,
                            Day = new DateTime(2023, 6, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 5
                        },
                        new
                        {
                            Id = 5,
                            Day = new DateTime(2023, 6, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 1,
                            ShiftType = 0
                        },
                        new
                        {
                            Id = 6,
                            Day = new DateTime(2023, 6, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 2,
                            ShiftType = 0
                        },
                        new
                        {
                            Id = 7,
                            Day = new DateTime(2023, 6, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 3
                        },
                        new
                        {
                            Id = 8,
                            Day = new DateTime(2023, 6, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 4,
                            ShiftType = 0
                        },
                        new
                        {
                            Id = 9,
                            Day = new DateTime(2023, 6, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 5,
                            ShiftType = 1
                        },
                        new
                        {
                            Id = 10,
                            Day = new DateTime(2023, 6, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 1
                        },
                        new
                        {
                            Id = 11,
                            Day = new DateTime(2023, 6, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 2,
                            ShiftType = 0
                        },
                        new
                        {
                            Id = 12,
                            Day = new DateTime(2023, 6, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 3,
                            ShiftType = 0
                        },
                        new
                        {
                            Id = 13,
                            Day = new DateTime(2023, 6, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 4,
                            ShiftType = 1
                        },
                        new
                        {
                            Id = 14,
                            Day = new DateTime(2023, 6, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 5,
                            ShiftType = 1
                        },
                        new
                        {
                            Id = 15,
                            Day = new DateTime(2023, 6, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 1
                        },
                        new
                        {
                            Id = 16,
                            Day = new DateTime(2023, 6, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 3,
                            ShiftType = 0
                        },
                        new
                        {
                            Id = 17,
                            Day = new DateTime(2023, 6, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 4,
                            ShiftType = 1
                        },
                        new
                        {
                            Id = 18,
                            Day = new DateTime(2023, 6, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 5,
                            ShiftType = 1
                        },
                        new
                        {
                            Id = 19,
                            Day = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 1
                        },
                        new
                        {
                            Id = 20,
                            Day = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 2,
                            ShiftType = 1
                        },
                        new
                        {
                            Id = 21,
                            Day = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 3,
                            ShiftType = 1
                        },
                        new
                        {
                            Id = 22,
                            Day = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 4
                        },
                        new
                        {
                            Id = 23,
                            Day = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 5,
                            ShiftType = 1
                        });
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Billing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonalInformationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonalInformationId");

                    b.ToTable("Billings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BankAccountNumber = "342301332136124",
                            Cost = 200m,
                            InvoiceDate = new DateTime(2023, 6, 11, 18, 58, 38, 665, DateTimeKind.Local).AddTicks(7403),
                            InvoiceNumber = "1.13.06.2023",
                            PersonalInformationId = 10
                        },
                        new
                        {
                            Id = 2,
                            BankAccountNumber = "343301232434821",
                            Cost = 90m,
                            InvoiceDate = new DateTime(2023, 6, 11, 23, 59, 0, 0, DateTimeKind.Local),
                            InvoiceNumber = "2.13.06.2023",
                            PersonalInformationId = 11
                        },
                        new
                        {
                            Id = 3,
                            BankAccountNumber = "543322635238421",
                            Cost = 50m,
                            InvoiceDate = new DateTime(2023, 6, 12, 0, 1, 0, 0, DateTimeKind.Local),
                            InvoiceNumber = "3.13.06.2023",
                            PersonalInformationId = 12
                        });
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Dispatcher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("bit");

                    b.Property<int>("PersonalInformationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonalInformationId");

                    b.ToTable("Dispatchers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BankAccountNumber = "4203987928122474",
                            IsWorking = true,
                            PersonalInformationId = 13
                        },
                        new
                        {
                            Id = 2,
                            BankAccountNumber = "4203787958122274",
                            IsWorking = true,
                            PersonalInformationId = 14
                        });
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Paramedic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDriver")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("bit");

                    b.Property<int>("PersonalInformationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonalInformationId");

                    b.ToTable("Paramedics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BankAccountNumber = "1203987908127474",
                            IsDriver = true,
                            IsWorking = true,
                            PersonalInformationId = 1
                        },
                        new
                        {
                            Id = 2,
                            BankAccountNumber = "124341763465609",
                            IsDriver = true,
                            IsWorking = true,
                            PersonalInformationId = 2
                        },
                        new
                        {
                            Id = 3,
                            BankAccountNumber = "121234124123109",
                            IsDriver = false,
                            IsWorking = true,
                            PersonalInformationId = 3
                        },
                        new
                        {
                            Id = 4,
                            BankAccountNumber = "123456780123109",
                            IsDriver = false,
                            IsWorking = true,
                            PersonalInformationId = 4
                        },
                        new
                        {
                            Id = 5,
                            BankAccountNumber = "982301231238812",
                            IsDriver = true,
                            IsWorking = true,
                            PersonalInformationId = 5
                        });
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonalInformationId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonalInformationId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PersonalInformationId = 6,
                            Weight = 60
                        },
                        new
                        {
                            Id = 2,
                            PersonalInformationId = 7,
                            Weight = 78
                        },
                        new
                        {
                            Id = 3,
                            PersonalInformationId = 8,
                            Weight = 55
                        },
                        new
                        {
                            Id = 4,
                            PersonalInformationId = 9,
                            Weight = 93
                        },
                        new
                        {
                            Id = 5,
                            PersonalInformationId = 15,
                            Weight = 100
                        });
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.PersonalInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApartmentNumber")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PersonalInformations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Warszawa",
                            Country = "Polska",
                            FirstName = "Adam",
                            HouseNumber = "10",
                            LastName = "Nowak",
                            PhoneNumber = "123456789",
                            PostalCode = "00-001",
                            StateProvince = "mazowieckie",
                            StreetAddress = "Kwiatowa"
                        },
                        new
                        {
                            Id = 2,
                            City = "Warszawa",
                            Country = "Polska",
                            FirstName = "Ewa",
                            HouseNumber = "20",
                            LastName = "Kowalska",
                            PhoneNumber = "987654321",
                            PostalCode = "02-002",
                            StateProvince = "mazowieckie",
                            StreetAddress = "Koszykowa"
                        },
                        new
                        {
                            Id = 3,
                            ApartmentNumber = 1,
                            City = "Warszawa",
                            Country = "Polska",
                            FirstName = "Piotr",
                            HouseNumber = "30",
                            LastName = "Lewandowski",
                            PhoneNumber = "555444333",
                            PostalCode = "03-003",
                            StateProvince = "mazowieckie",
                            StreetAddress = "Wrocławska"
                        },
                        new
                        {
                            Id = 4,
                            ApartmentNumber = 2,
                            City = "Poznań",
                            Country = "Polska",
                            FirstName = "Magdalena",
                            HouseNumber = "40",
                            LastName = "Kaczmarek",
                            PhoneNumber = "111222333",
                            PostalCode = "04-004",
                            StateProvince = "wielkopolskie",
                            StreetAddress = "Piłsudskiego"
                        },
                        new
                        {
                            Id = 5,
                            City = "Kraków",
                            Country = "Polska",
                            FirstName = "Marek",
                            HouseNumber = "50",
                            LastName = "Jankowski",
                            PhoneNumber = "555888999",
                            PostalCode = "05-005",
                            StateProvince = "małopolskie",
                            StreetAddress = "Krakowska"
                        },
                        new
                        {
                            Id = 6,
                            ApartmentNumber = 7,
                            City = "Gdańsk",
                            Country = "Polska",
                            FirstName = "Anna",
                            HouseNumber = "12",
                            LastName = "Kowalczyk",
                            PhoneNumber = "789232737",
                            PostalCode = "80-255",
                            StateProvince = "pomorskie",
                            StreetAddress = "Polna"
                        },
                        new
                        {
                            Id = 7,
                            ApartmentNumber = 2,
                            City = "Warszawa",
                            Country = "Polska",
                            FirstName = "Marek",
                            HouseNumber = "34",
                            LastName = "Michalski",
                            PhoneNumber = "444555666",
                            PostalCode = "00-207",
                            StateProvince = "mazowieckie",
                            StreetAddress = "Jana Pawła II"
                        },
                        new
                        {
                            Id = 8,
                            ApartmentNumber = 5,
                            City = "Katowice",
                            Country = "Polska",
                            FirstName = "Magdalena",
                            HouseNumber = "17",
                            LastName = "Jankowska",
                            PhoneNumber = "777888999",
                            PostalCode = "40-009",
                            StateProvince = "śląskie",
                            StreetAddress = "Mickiewicza"
                        },
                        new
                        {
                            Id = 9,
                            ApartmentNumber = 12,
                            City = "Wrocław",
                            Country = "Polska",
                            FirstName = "Paweł",
                            HouseNumber = "7",
                            LastName = "Wójcik",
                            PhoneNumber = "222333444",
                            PostalCode = "50-049",
                            StateProvince = "dolnośląskie",
                            StreetAddress = "Słowackiego"
                        },
                        new
                        {
                            Id = 10,
                            ApartmentNumber = 3,
                            City = "Wrocław",
                            Country = "Polska",
                            FirstName = "Dominik",
                            HouseNumber = "4",
                            LastName = "Marciniak",
                            PhoneNumber = "272332424",
                            PostalCode = "50-041",
                            StateProvince = "dolnośląskie",
                            StreetAddress = "Warszawska"
                        },
                        new
                        {
                            Id = 11,
                            ApartmentNumber = 7,
                            City = "Katowice",
                            Country = "Polska",
                            FirstName = "Jacek",
                            HouseNumber = "12",
                            LastName = "Marciniak",
                            PhoneNumber = "583549273",
                            PostalCode = "40-012",
                            StateProvince = "śląskie",
                            StreetAddress = "Rynek"
                        },
                        new
                        {
                            Id = 12,
                            City = "Katowice",
                            Country = "Polska",
                            FirstName = "Amelia",
                            HouseNumber = "81",
                            LastName = "Kołodziej",
                            PhoneNumber = "583729485",
                            PostalCode = "40-019",
                            StateProvince = "śląskie",
                            StreetAddress = "Pływacka"
                        },
                        new
                        {
                            Id = 13,
                            City = "Katowice",
                            Country = "Polska",
                            FirstName = "Joanna",
                            HouseNumber = "18",
                            LastName = "Nowak",
                            PhoneNumber = "239583745",
                            PostalCode = "40-003",
                            StateProvince = "śląskie",
                            StreetAddress = "Górnicza"
                        },
                        new
                        {
                            Id = 14,
                            ApartmentNumber = 3,
                            City = "Katowice",
                            Country = "Polska",
                            FirstName = "Grzegorz",
                            HouseNumber = "1",
                            LastName = "Polański",
                            PhoneNumber = "294725402",
                            PostalCode = "40-007",
                            StateProvince = "śląskie",
                            StreetAddress = "Różana"
                        },
                        new
                        {
                            Id = 15,
                            City = "Kraków",
                            Country = "Polska",
                            FirstName = "Marek",
                            HouseNumber = "50",
                            LastName = "Jankowski",
                            PhoneNumber = "555888999",
                            PostalCode = "05-005",
                            StateProvince = "małopolskie",
                            StreetAddress = "Krakowska"
                        });
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParamedicId")
                        .HasColumnType("int");

                    b.Property<decimal>("PayPerHour")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ParamedicId");

                    b.ToTable("Rates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 6, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 1,
                            PayPerHour = 12m
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2023, 6, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 2,
                            PayPerHour = 12m
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2023, 6, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 3,
                            PayPerHour = 12m
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2023, 6, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 4,
                            PayPerHour = 12m
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2023, 6, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 5,
                            PayPerHour = 12m
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2023, 6, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 1,
                            PayPerHour = 13m
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2023, 6, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 5,
                            PayPerHour = 13m
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2023, 6, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            ParamedicId = 1,
                            PayPerHour = 14m
                        });
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Undefined"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "Paramedic"
                        },
                        new
                        {
                            RoleId = 3,
                            Name = "Dispatcher"
                        },
                        new
                        {
                            RoleId = 4,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DispatcherId")
                        .HasColumnType("int");

                    b.Property<decimal>("Income")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("DispatcherId");

                    b.ToTable("Salaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 6, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            DispatcherId = 1,
                            Income = 1200m
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2023, 6, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            DispatcherId = 2,
                            Income = 1200m
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2023, 6, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            DispatcherId = 1,
                            Income = 1300m
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2023, 6, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            DispatcherId = 1,
                            Income = 1500m
                        });
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("ParamedicId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("ParamedicId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Day = new DateTime(2023, 6, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            DriverId = 1,
                            ParamedicId = 3,
                            ShiftType = 0
                        },
                        new
                        {
                            Id = 2,
                            Day = new DateTime(2023, 6, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            DriverId = 5,
                            ParamedicId = 4,
                            ShiftType = 1
                        },
                        new
                        {
                            Id = 3,
                            Day = new DateTime(2023, 6, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            DriverId = 1,
                            ParamedicId = 2,
                            ShiftType = 0
                        },
                        new
                        {
                            Id = 4,
                            Day = new DateTime(2023, 6, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            DriverId = 5,
                            ParamedicId = 3,
                            ShiftType = 1
                        },
                        new
                        {
                            Id = 5,
                            Day = new DateTime(2023, 6, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            DriverId = 1,
                            ParamedicId = 2,
                            ShiftType = 0
                        },
                        new
                        {
                            Id = 6,
                            Day = new DateTime(2023, 6, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            DriverId = 5,
                            ParamedicId = 4,
                            ShiftType = 1
                        },
                        new
                        {
                            Id = 7,
                            Day = new DateTime(2023, 6, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            DriverId = 1,
                            ParamedicId = 3,
                            ShiftType = 0
                        },
                        new
                        {
                            Id = 8,
                            Day = new DateTime(2023, 6, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            DriverId = 5,
                            ParamedicId = 4,
                            ShiftType = 1
                        },
                        new
                        {
                            Id = 9,
                            Day = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            DriverId = 1,
                            ParamedicId = 4,
                            ShiftType = 0
                        },
                        new
                        {
                            Id = 10,
                            Day = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            DriverId = 2,
                            ParamedicId = 3,
                            ShiftType = 1
                        });
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Transport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BillingId")
                        .HasColumnType("int");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Financing")
                        .HasColumnType("int");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PatientPosition")
                        .HasColumnType("int");

                    b.Property<string>("ReturnLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TransportType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillingId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TeamId");

                    b.ToTable("Transports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Destination = "Saska 43 Rybnik",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 1,
                            PatientPosition = 0,
                            StartTime = new DateTime(2023, 6, 11, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 1,
                            TransportType = 0
                        },
                        new
                        {
                            Id = 2,
                            BillingId = 1,
                            Destination = "Nadrzeczna 55 Mysłowice",
                            Financing = 2,
                            IsCancelled = false,
                            PatientId = 2,
                            PatientPosition = 1,
                            StartTime = new DateTime(2023, 6, 11, 9, 10, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 1,
                            TransportType = 0
                        },
                        new
                        {
                            Id = 3,
                            BillingId = 2,
                            Destination = "Wyszogrodzka 44 Bytom",
                            Financing = 1,
                            IsCancelled = false,
                            PatientId = 3,
                            PatientPosition = 1,
                            StartTime = new DateTime(2023, 6, 11, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 1,
                            TransportType = 1
                        },
                        new
                        {
                            Id = 4,
                            BillingId = 3,
                            Destination = "Dobosza 101 Zabrze",
                            Financing = 1,
                            IsCancelled = false,
                            PatientId = 4,
                            PatientPosition = 1,
                            StartTime = new DateTime(2023, 6, 11, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 2,
                            TransportType = 1
                        },
                        new
                        {
                            Id = 5,
                            Destination = "Dyngus 30 Chorzów",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 5,
                            PatientPosition = 2,
                            StartTime = new DateTime(2023, 6, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 2,
                            TransportType = 0
                        },
                        new
                        {
                            Id = 6,
                            Destination = "Obornicka 89 Rybnik",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 4,
                            PatientPosition = 1,
                            StartTime = new DateTime(2023, 6, 12, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 3,
                            TransportType = 0
                        },
                        new
                        {
                            Id = 7,
                            Destination = "Zakładowa 19 Częstochowa",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 2,
                            PatientPosition = 0,
                            StartTime = new DateTime(2023, 6, 12, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 3,
                            TransportType = 0
                        },
                        new
                        {
                            Id = 8,
                            Destination = "Ustronna 70 Gliwice",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 1,
                            PatientPosition = 0,
                            StartTime = new DateTime(2023, 6, 12, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 3,
                            TransportType = 0
                        },
                        new
                        {
                            Id = 9,
                            Destination = "Oboźna 43 Tychy",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 4,
                            PatientPosition = 1,
                            StartTime = new DateTime(2023, 6, 12, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 4,
                            TransportType = 0
                        },
                        new
                        {
                            Id = 10,
                            Destination = "Mickiewicza 119 Żory",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 2,
                            PatientPosition = 0,
                            StartTime = new DateTime(2023, 6, 12, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 4,
                            TransportType = 0
                        },
                        new
                        {
                            Id = 11,
                            Destination = "Rycerska 13 Sosnowiec",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 5,
                            PatientPosition = 2,
                            StartTime = new DateTime(2023, 6, 12, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 4,
                            TransportType = 0
                        },
                        new
                        {
                            Id = 12,
                            Destination = "Skromna 116 Bieruń",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 1,
                            PatientPosition = 0,
                            StartTime = new DateTime(2023, 6, 13, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 5,
                            TransportType = 1
                        },
                        new
                        {
                            Id = 13,
                            Destination = "Lidzka 53 Świętochłowice",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 3,
                            PatientPosition = 0,
                            StartTime = new DateTime(2023, 6, 13, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 5,
                            TransportType = 1
                        },
                        new
                        {
                            Id = 14,
                            Destination = "Pomarańczowa 95 Bielsko-Biała",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 2,
                            PatientPosition = 0,
                            StartTime = new DateTime(2023, 6, 13, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 5,
                            TransportType = 1
                        },
                        new
                        {
                            Id = 15,
                            Destination = "Bydgoska 123 Ruda Śląska",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 4,
                            PatientPosition = 1,
                            StartTime = new DateTime(2023, 6, 13, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 6,
                            TransportType = 1
                        },
                        new
                        {
                            Id = 16,
                            Destination = "Różana 138 Żory",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 2,
                            PatientPosition = 0,
                            StartTime = new DateTime(2023, 6, 13, 17, 45, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 6,
                            TransportType = 1
                        },
                        new
                        {
                            Id = 17,
                            Destination = "Okrzei Stefana 132 Chorzów",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 4,
                            PatientPosition = 1,
                            StartTime = new DateTime(2023, 6, 13, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 6,
                            TransportType = 0
                        },
                        new
                        {
                            Id = 18,
                            Destination = "Diamentowa 5 Częstochowa",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 1,
                            PatientPosition = 0,
                            StartTime = new DateTime(2023, 6, 14, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 7,
                            TransportType = 1
                        },
                        new
                        {
                            Id = 19,
                            Destination = "Pawlikowskiego Tadeusza 96 Cieszyn",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 2,
                            PatientPosition = 0,
                            StartTime = new DateTime(2023, 6, 14, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 7,
                            TransportType = 0
                        },
                        new
                        {
                            Id = 20,
                            Destination = "Generała Szyllinga Antoniego 111 Imielin",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 3,
                            PatientPosition = 0,
                            StartTime = new DateTime(2023, 6, 14, 13, 15, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 7,
                            TransportType = 1
                        },
                        new
                        {
                            Id = 21,
                            Destination = "Urbańskiego Tadeusza 45 Pszów",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 5,
                            PatientPosition = 2,
                            StartTime = new DateTime(2023, 6, 14, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 8,
                            TransportType = 1
                        },
                        new
                        {
                            Id = 22,
                            Destination = "Czerwona 46 Katowice",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 4,
                            PatientPosition = 1,
                            StartTime = new DateTime(2023, 6, 14, 17, 15, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 8,
                            TransportType = 1
                        },
                        new
                        {
                            Id = 23,
                            Destination = "Reutta 54 Bytom",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 3,
                            PatientPosition = 0,
                            StartTime = new DateTime(2023, 6, 14, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 8,
                            TransportType = 0
                        },
                        new
                        {
                            Id = 24,
                            Destination = "Cybernetyków 120 Tychy",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 1,
                            PatientPosition = 0,
                            StartTime = new DateTime(2023, 6, 15, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 9,
                            TransportType = 1
                        },
                        new
                        {
                            Id = 25,
                            Destination = "Kaszubska 18 Świętochłowice",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 3,
                            PatientPosition = 0,
                            StartTime = new DateTime(2023, 6, 15, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 9,
                            TransportType = 1
                        },
                        new
                        {
                            Id = 26,
                            Destination = "Cybernetyków 120 Tychy",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 2,
                            PatientPosition = 0,
                            StartTime = new DateTime(2023, 6, 15, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 10,
                            TransportType = 1
                        },
                        new
                        {
                            Id = 27,
                            Destination = "Kaszubska 18 Świętochłowice",
                            Financing = 0,
                            IsCancelled = false,
                            PatientId = 5,
                            PatientPosition = 2,
                            StartTime = new DateTime(2023, 6, 15, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 10,
                            TransportType = 0
                        });
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Availability", b =>
                {
                    b.HasOne("MediMove.Server.Application.Models.Paramedic", "Paramedic")
                        .WithMany("Availabilities")
                        .HasForeignKey("ParamedicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paramedic");
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Billing", b =>
                {
                    b.HasOne("MediMove.Server.Application.Models.PersonalInformation", "PersonalInformation")
                        .WithMany()
                        .HasForeignKey("PersonalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalInformation");
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Dispatcher", b =>
                {
                    b.HasOne("MediMove.Server.Application.Models.PersonalInformation", "PersonalInformation")
                        .WithMany()
                        .HasForeignKey("PersonalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalInformation");
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Paramedic", b =>
                {
                    b.HasOne("MediMove.Server.Application.Models.PersonalInformation", "PersonalInformation")
                        .WithMany()
                        .HasForeignKey("PersonalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalInformation");
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Patient", b =>
                {
                    b.HasOne("MediMove.Server.Application.Models.PersonalInformation", "PersonalInformation")
                        .WithMany()
                        .HasForeignKey("PersonalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalInformation");
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Rate", b =>
                {
                    b.HasOne("MediMove.Server.Application.Models.Paramedic", "Paramedic")
                        .WithMany("Rates")
                        .HasForeignKey("ParamedicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paramedic");
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Salary", b =>
                {
                    b.HasOne("MediMove.Server.Application.Models.Dispatcher", "Dispatcher")
                        .WithMany("Salaries")
                        .HasForeignKey("DispatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dispatcher");
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Team", b =>
                {
                    b.HasOne("MediMove.Server.Application.Models.Paramedic", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MediMove.Server.Application.Models.Paramedic", "Paramedic")
                        .WithMany()
                        .HasForeignKey("ParamedicId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Driver");

                    b.Navigation("Paramedic");
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Transport", b =>
                {
                    b.HasOne("MediMove.Server.Application.Models.Billing", "Billing")
                        .WithMany()
                        .HasForeignKey("BillingId");

                    b.HasOne("MediMove.Server.Application.Models.Patient", "Patient")
                        .WithMany("Transports")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediMove.Server.Application.Models.Team", "Team")
                        .WithMany("Transports")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Billing");

                    b.Navigation("Patient");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.User", b =>
                {
                    b.HasOne("MediMove.Server.Application.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Dispatcher", b =>
                {
                    b.Navigation("Salaries");
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Paramedic", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Patient", b =>
                {
                    b.Navigation("Transports");
                });

            modelBuilder.Entity("MediMove.Server.Application.Models.Team", b =>
                {
                    b.Navigation("Transports");
                });
#pragma warning restore 612, 618
        }
    }
}
