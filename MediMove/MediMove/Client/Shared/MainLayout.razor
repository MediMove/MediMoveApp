@using MediMove.Client.temp;
@inject MediMoveAuthenticationStateProvider stateProvider
@inject NavigationManager NavManager
@inherits LayoutComponentBase


<div class="page">
   @* @if (IsAuthorized)
    {
        <div class="sidebar">
            <NavMenu />
        </div>
    }*@
    <AuthorizeView>
        <div class="sidebar">
            <NavMenu />
        </div>
    </AuthorizeView>
    <main>
        <div class="top-row px-4">
            <AuthorizeView>
                
                <a href="" @onclick="@HandleLogout" @onclick:preventDefault>Logout</a>

            </AuthorizeView>
            
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    //private bool IsAuthorized = false;

    //protected override async Task OnInitializedAsync()
    //{

    //    var state = await stateProvider.GetAuthenticationStateAsync();
    //    IsAuthorized = state.User.Identity.IsAuthenticated;
    //}

    private async Task HandleLogout()
    {
        stateProvider.Logout();
        NavManager.NavigateTo("/login/", true);
    }
}
