@page "/admin/employees"
@using MediMove.Client.Services
@using MediMove.Shared.Models.DTOs
@inject EmployeeService _employeeService

<style>
    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #f2f2f2;
    }

    tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    .edit-input {
        width: 100%;
    }
</style>

<Popup @ref="popup" />

<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>Email</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Street Address</th>
            <th>House Number</th>
            <th>Apartment Number</th>
            <th>City</th>
            <th>Postal Code</th>
            <th>State/Province</th>
            <th>Country</th>
            <th>Phone Number</th>
            <th>Bank Account Number</th>
            <th>Is Working</th>
            <th>Salary/Pay Per Hour</th>
            <th>Is Driver</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var employee in employees)
        {
            <tr>
                <td>@employee.Id</td>
                <td><input type="text" @bind="@employee.Email" @oninput="e => HandleInputChange(e, employee)" class="edit-input" /></td>
                <td><input type="text" @bind="@employee.FirstName" @oninput="e => HandleInputChange(e, employee)" class="edit-input" /></td>
                <td><input type="text" @bind="@employee.LastName" @oninput="e => HandleInputChange(e, employee)" class="edit-input" /></td>
                <td><input type="text" @bind="@employee.StreetAddress" @oninput="e => HandleInputChange(e, employee)" class="edit-input" /></td>
                <td><input type="text" @bind="@employee.HouseNumber" @oninput="e => HandleInputChange(e, employee)" class="edit-input" /></td>
                <td><input type="text" @bind="@employee.ApartmentNumber" @oninput="e => HandleInputChange(e, employee)" class="edit-input" /></td>
                <td><input type="text" @bind="@employee.City" @oninput="e => HandleInputChange(e, employee)" class="edit-input" /></td>
                <td><input type="text" @bind="@employee.PostalCode" @oninput="e => HandleInputChange(e, employee)" class="edit-input" /></td>
                <td><input type="text" @bind="@employee.StateProvince" @oninput="e => HandleInputChange(e, employee)" class="edit-input" /></td>
                <td><input type="text" @bind="@employee.Country" @oninput="e => HandleInputChange(e, employee)" class="edit-input" /></td>
                <td><input type="text" @bind="@employee.PhoneNumber" @oninput="e => HandleInputChange(e, employee)" class="edit-input" /></td>
                <td><input type="text" @bind="@employee.BankAccountNumber" @oninput="e => HandleInputChange(e, employee)" class="edit-input" /></td>
                <td><input type="checkbox" @bind="@employee.IsWorking" @oninput="e => HandleInputChange(e, employee)" /></td>
                @if (employee is DispatcherDTO dispatcher)
                {
                    <td><input type="text" @bind="@dispatcher.Salary" @oninput="e => HandleInputChange(e, employee)" class="edit-input" /></td>
                    <td>-</td>
                }
                else if (employee is ParamedicDTO paramedic)
                {
                    <td><input type="text" @bind="@paramedic.PayPerHour" @oninput="e => HandleInputChange(e, employee)" class="edit-input" /></td>
                    <td><input type="checkbox" @bind="@paramedic.IsDriver" @oninput="e => HandleInputChange(e, employee)" /></td>
                }
                else
                {
                    <td></td>
                    <td></td>
                }
            </tr>
        }
    </tbody>
</table>

<div style="margin-top: 10px;">
    <button class="btn btn-primary" @onclick="SaveChanges">Save Changes</button>
</div>

@code {
    private Popup popup;

    private EmployeeDTO[] employees = new EmployeeDTO[0];
    private HashSet<EmployeeDTO> modifiedEmployees = new HashSet<EmployeeDTO>();

    protected override async Task OnInitializedAsync()
    {
        var getEmployeesRequestResult = await _employeeService.GetAllEmployees();
        popup.ShowErrorsOrAssign(getEmployeesRequestResult, ref employees);
    }

    private async void SaveChanges()
    {
        if (!modifiedEmployees.Any())
        {
            popup.Show("No changes to save.");
            return;
        }

        var updateResult = await _employeeService.UpdateEmployees(modifiedEmployees.ToList());
        popup.ShowErrorsOrMessage(updateResult);
    }

    private void HandleInputChange(ChangeEventArgs e, EmployeeDTO employee) =>
        modifiedEmployees.Add(employee);
}