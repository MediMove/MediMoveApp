@page "/admin/patientsreport"

@using MediMove.Client.temp;
@using MediMove.Shared.Models.DTOs
@using MediMove.Client.Services
@using System.Globalization
@using Microsoft.AspNetCore.Components.Web
@using System.ComponentModel.DataAnnotations;
@using Radzen.Blazor
@inject MediMoveAuthenticationStateProvider _stcateProvider
@inject PatientService _patientService
@inject NavigationManager _navigationManager

<h3>AdminPatientsReport</h3>

@*<form>
    <label for="monthPicker">Select Month and Year:</label>
    <input type="month" id="monthPicker" name="monthPicker" />
    <input type="submit" value="Submit" />
</form>*@
@if (_popupIsVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Message</h5>
                    <button type="button" class="btn-close" @onclick="ClosePopup"></button>
                </div>
                <div class="modal-body">
                    <p>@_popupMessage</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ClosePopup">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}
<div class="form-group" style="display:flex">
    <div class="input-group">
        <RadzenLabel Text="Start Time" Associated="startTime" />
        <RadzenDatePicker @bind-Value="@startTime" ShowTime="false" DateFormat="dd.MM.yyyy" />
    </div>

    <div class="input-group">
        <RadzenLabel Text="End Time" Associated="endTime" />
        <RadzenDatePicker @bind-Value="@endTime" ShowTime="false" DateFormat="dd.MM.yyyy" />
    </div>

    <div class="input-group">
        <RadzenLabel Text="Start Amount Sum" />
        <RadzenNumeric TValue="decimal" Format="0.00 zł" @bind-Value="@startAmount"/>
    </div>

    <div class="input-group">
        <RadzenLabel Text="End Amount Sum" />
        <RadzenNumeric TValue="decimal" Format="0.00 zł" @bind-Value="@endAmount" />
    </div>
</div>
<div>
    <RadzenButton class="btn btn-primary" Text="Show Results" Click="@Refresh" />
</div>

@if (everythingSelected)
{
    <div style="display: flex; align-items: center; margin-bottom: 16px">
        <RadzenButton Click="@ClearSelection" Text="Clear Selection" />
        @if (selectedPatient?.Any() == true)
        {
            <div style="margin-left: 16px">
                Selected Patient: @selectedPatient[0].FirstName @selectedPatient[0].LastName
            </div>
        }
    </div>    <div>
        <RadzenDataGrid TItem="GetPatientsByDateAndPaymentsSumDTO.GetPatientsByDateAndPaymentsSumRow" Data="@allPatients?.Rows" AllowFiltering="true"
        AllowSorting="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedPatient>
            <Columns>
                <RadzenDataGridColumn TItem="GetPatientsByDateAndPaymentsSumDTO.GetPatientsByDateAndPaymentsSumRow" Property="Id" Title = "Id"/>
                <RadzenDataGridColumn TItem="GetPatientsByDateAndPaymentsSumDTO.GetPatientsByDateAndPaymentsSumRow" Property="Weight" Title = "Weight"/>
                <RadzenDataGridColumn TItem="GetPatientsByDateAndPaymentsSumDTO.GetPatientsByDateAndPaymentsSumRow" Property="FirstName" Title = "First Name"/>
                <RadzenDataGridColumn TItem="GetPatientsByDateAndPaymentsSumDTO.GetPatientsByDateAndPaymentsSumRow" Property="LastName" Title = "Last Name"/>
                @*                <RadzenDataGridColumn TItem="GetPatientsByDateAndPaymentsSumDTO.GetPatientsByDateAndPaymentsSumRow" Property="StreetAddress" Title = "Street Adress"/>*@
                @*                <RadzenDataGridColumn TItem="GetPatientsByDateAndPaymentsSumDTO.GetPatientsByDateAndPaymentsSumRow" Property="HouseNumber" Title = "House Number"/>*@
                @*                <RadzenDataGridColumn TItem="GetPatientsByDateAndPaymentsSumDTO.GetPatientsByDateAndPaymentsSumRow" Property="ApartmentNumber" Title = "Apartment Number"/>*@  
                @*                <RadzenDataGridColumn TItem="GetPatientsByDateAndPaymentsSumDTO.GetPatientsByDateAndPaymentsSumRow" Property="PostalCode" Title = "Postal Code"/>*@            
                <RadzenDataGridColumn TItem="GetPatientsByDateAndPaymentsSumDTO.GetPatientsByDateAndPaymentsSumRow" Property="Country" Title = "Country"/>
                <RadzenDataGridColumn TItem="GetPatientsByDateAndPaymentsSumDTO.GetPatientsByDateAndPaymentsSumRow" Property="PhoneNumber" Title = "Phone Number"/>
                <RadzenDataGridColumn TItem="GetPatientsByDateAndPaymentsSumDTO.GetPatientsByDateAndPaymentsSumRow" Property="PaymentsSum" Title = "Payments Sum"/>
                @* <Template Context="detail
            <RadzenLabel Text="@detail.SalarySum.ToString("C", new System.Globalization.CultureInfo("pl-PL"))" />
            </Template>*@
            </Columns>
        </RadzenDataGrid>
    </div>
}
@if (selectedPatient?.Any() == true)
{
    <div>
        <RadzenButton class="btn btn-primary" Text="Show data" Click="@FetchData" />
    </div>
    @if (isFetched == true)
    {
        <div>
            <RadzenDataGrid TItem="PatientDTO" Data="@PatientDetails" AllowFiltering="true"
            AllowSorting="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" SelectionMode="DataGridSelectionMode.Single" >
                <Columns>
                    <RadzenDataGridColumn TItem="PatientDTO" Property="City" Title="City" />
                    <RadzenDataGridColumn TItem="PatientDTO" Property="StreetAddress" Title = "Street Adress"/>
                    <RadzenDataGridColumn TItem="PatientDTO" Property="HouseNumber" Title="House Number" />
                    <RadzenDataGridColumn TItem="PatientDTO" Property="ApartmentNumber" Title="Apartment Number" />
                    <RadzenDataGridColumn TItem="PatientDTO" Property="PostalCode" Title="Postal Code" />
                    <RadzenDataGridColumn TItem="PatientDTO" Property="StateProvince" Title="State Province" />
                    @* <RadzenDataGridColumn TItem="GetPatientsByDateAndPaymentsSumDTO.GetPatientsByDateAndPaymentsSumRow" Property="Country" Title="Country" />
                    <RadzenDataGridColumn TItem="GetPatientsByDateAndPaymentsSumDTO.GetPatientsByDateAndPaymentsSumRow" Property="PhoneNumber" Title="Phone Number" />
                    <RadzenDataGridColumn TItem="GetPatientsByDateAndPaymentsSumDTO.GetPatientsByDateAndPaymentsSumRow" Property="PaymentsSum" Title="Payments Sum" />
                   *@ @* <Template Context="detail
            <RadzenLabel Text="@detail.SalarySum.ToString("C", new System.Globalization.CultureInfo("pl-PL"))" />
            </Template>*@
                </Columns>
            </RadzenDataGrid>
        </div>
    }
}

@code {
    private DateTime startTime = DateTime.Today;
    private DateTime endTime = DateTime.Today;
    private decimal startAmount = (decimal)0;
    private decimal endAmount = (decimal)0;
    private bool everythingSelected = false;
    private bool isSelected = false;
    private bool isFetched = false;
    IList<GetPatientsByDateAndPaymentsSumDTO.GetPatientsByDateAndPaymentsSumRow> selectedPatient;


    private GetPatientsByDateAndPaymentsSumDTO allPatients;
    private GetPatientsByDateAndPaymentsSumDTO allEmployeesInMonthByHoursAndSalaryResponse;// Replace with the appropriate type and initialization
    private List<PatientDTO> PatientDetails = new List<PatientDTO>();
    private bool _popupIsVisible = false;
    private string _popupMessage = "";
    private string message = "";
    //private CreatePatientRequest createPatientDTO = new CreatePatientRequest();
    void ClearSelection()
    {
        selectedPatient = null;
        isSelected = false;
        StateHasChanged();
    }
    private void CheckSelection()
    {
        if (endTime < startTime || endAmount < startAmount)
        {
            if (endTime < startTime)
            {
                everythingSelected = false;
                message += "EndTime should be further in the future than StartTime\n";
            }
            if (endAmount < startAmount)
            {
                everythingSelected = false;
                message += "EndAmount should be bigger than StartAmount\n";
            }
            ShowPopup(message);
        }
        else
        {
            everythingSelected = true;
        }
    }
    //private void LoadData(LoadDataArgs args)
    //{
    //    //console.Log($"Skip: {args.Skip}, Top: {args.Top}");

    //    var query = allPatients.Rows.AsQueryable();

    //    if (!string.IsNullOrEmpty(args.Filter))
    //    {
    //        query = query.Where(args.Filter);
    //        count = query.Count();
    //    }
    //    else
    //    {
    //        count = allPatients.Rows.Count();
    //    }

    //    if (!string.IsNullOrEmpty(args.OrderBy))
    //    {
    //        query = query.OrderBy(args.OrderBy);
    //    }

    //    orderDetails = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
    //}



    private async void Refresh()
    {
        //CheckSelection();
        CheckSelection();
        //teamResponse = await _teamService.GetTeamsByDAyAndShift(DateTime.UtcNow.AddDays(-9));
        allEmployeesInMonthByHoursAndSalaryResponse = await _patientService.GetPatientsReport(startTime, endTime, startAmount , endAmount);
        allPatients = allEmployeesInMonthByHoursAndSalaryResponse;
        //NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        StateHasChanged();

    }
    private async void FetchData()
    {
        var temp = await _patientService.GetPatients();
        var det = temp.Patients.Where(p => p.Key == selectedPatient[0].Id).Select(p => p.Value).First();
        PatientDetails.Add(det);
        isFetched = true;
        StateHasChanged();

    }
    private void ShowPopup(string message)
    {
        _popupIsVisible = true;
        _popupMessage = message;
        StateHasChanged();
    }

    private void ClosePopup()
    {
        _popupIsVisible = false;
        _popupMessage = "";
        StateHasChanged();
    }
}




@*
@code{
    private GetEmployeesInMonthByHoursAndSalaryResponse allPatients;
    private GetEmployeesInMonthByHoursAndSalaryResponse allEmployeesInMonthByHoursAndSalaryResponse;// Replace with the appropriate type and initialization
    //private CreatePatientRequest createPatientDTO = new CreatePatientRequest();
    //private GetTeamsByDateAndShiftResponse teamResponse = new GetTeamsByDateAndShiftResponse();

    protected override async Task OnInitializedAsync()
    {
        allEmployeesInMonthByHoursAndSalaryResponse = await _EmployeeService.GetEmployeesReport();
        allPatients = allEmployeesInMonthByHoursAndSalaryResponse;
        //createTransportDTO.StartTime = DateTime.Now;
    }

    //private async void HandleStartTimeInput(ChangeEventArgs e)
    //{
    //    teamResponse = await _TeamService.GetTeamsByDAyAndShift(createTransportDTO.StartTime);
    //}

    //private void SelectPatient(int patientId)
    //{
    //    if (_selectedPatientId == patientId)
    //    {
    //        _selectedPatientId = null; // Deselect if the same patient is clicked
    //        createTransportDTO.PatientId = 0; // Update the Patient ID field to a default value
    //    }
    //    else
    //    {
    //        _selectedPatientId = patientId;
    //        createTransportDTO.PatientId = patientId;
    //    }
    //}

    //private void SelectTeam(int patientId)
    //{
    //    if (_selectedTeamId == patientId)
    //    {
    //        _selectedTeamId = null; // Deselect if the same patient is clicked
    //        createTransportDTO.TeamId = 0; // Update the Patient ID field to a default value
    //    }
    //    else
    //    {
    //        _selectedTeamId = patientId;
    //        createTransportDTO.TeamId = patientId;
    //    }
    //}

    //private string GetPatientItemClass(int patientId)
    //{
    //    return patientId == _selectedPatientId ? "patient-item selected" : "patient-item";
    //}

    //private string GetTeamItemClass(int teamId)
    //{
    //    return teamId == _selectedTeamId ? "patient-item selected" : "patient-item";
    //}


    private async void Refresh()
    {
        allPatients = await _EmployeeService.GetEmployeesReport();
    }



}*@
