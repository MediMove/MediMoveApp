@page "/login/"
@using MediMove.Client.temp;
@using MediMove.Shared.Models.DTOs
@using System.Text
@using Azure
@using Newtonsoft.Json
@using JsonSerializer = System.Text.Json.JsonSerializer
@using System.Net
@inject HttpClient httpClient
@inject NavigationManager NavManager
@inject MediMoveAuthenticationStateProvider stateProvider

<h3>Login</h3>

<form @onsubmit="HandleLogin">
    <p>
        <label for="username">Username:</label>
        <input id="username" @bind="email" />
    </p>
    <p>
        <label for="password">Password:</label>
        <input id="password" @bind="password" type="password" />
    </p>
    <p>
        <button type="submit">Login</button>
    </p>
</form>
@*<AuthorizedView> 
<form @onsubmit="HandleLogout">
    <p>
        <button type="submit">Logout</button>
    </p>
</form>
</AuthorizedView>*@

@if (response.ErrorResponse is not null)
{
    @if(response.ErrorResponse.Errors is null)
    {
        <p>
            Wrong username or password.
        </p>
    }
    else
    {
        <p>Errors:</p>
        <ul>
            @foreach (var error in response.ErrorResponse.Errors)
            {
                <li>@error.Key.Replace("dto.",""):</li>
                <ul>
                    @foreach (var errorMessage in error.Value)
                    {
                        <li>@errorMessage.Replace("dto.","").Replace("dto", "")</li>
                    }
                </ul>
            }
        </ul>
    }
}


@code {
    private string email;
    private string password;
    private MediMoveResponse response = new();

    private async Task HandleLogin()
    {
        var loginDTO = new LoginUserDTO()
            {
                Email = email,
                Password = password
            };

        var json = JsonConvert.SerializeObject(loginDTO);

        var content = new StringContent(json, Encoding.UTF8, "application/json");
        response = await stateProvider.LoginAsync(content);

        if(response.HttpResponse is not null)
        {
            var role = await stateProvider.GetRole();
            switch (role)
            {
                case "Paramedic":
                    NavManager.NavigateTo("/MainParamedic");
                    break;
                case "Dispacher":
                    NavManager.NavigateTo("/MainDispacher");
                    break;
                case "Admin":
                    break;
                default:
                    break;
            }
        }
        else
        {
            NavManager.NavigateTo("", true);
        }
    }

  
}
