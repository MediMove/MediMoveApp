@page "/"
@using MediMove.Client.temp;
@using MediMove.Shared.Models.DTOs
@using System.Text
@using Azure
@using Newtonsoft.Json
@using JsonSerializer = System.Text.Json.JsonSerializer
@using System.Net
@inject HttpClient httpClient
@inject NavigationManager NavManager
@inject MediMoveAuthenticationStateProvider stateProvider

<h3>Login</h3>

<form @onsubmit="HandleLogin">
    <p>
        <label for="username">Username:</label>
        <input id="username" @bind="email"/>
    </p>
    <p>
        <label for="password">Password:</label>
        <input id="password" @bind="password" type="password"/>
    </p>
    <p>
    <button type="submit">Login</button>
    </p>
</form>


    <p>@loginResponse</p>

        <div>User: @stateProvider.Role</div>
        <div>State: @z</div>
        @if (z)
{
    NavManager.NavigateTo("/Counter");
}
@if (errorResponse != null && errorResponse.Errors != null)
    {
        <p>Errors:</p>
        <ul>
            @foreach (var error in errorResponse.Errors)
            {
                <li>@error.Key.Replace("dto.",""):</li>
                <ul>
                    @foreach (var errorMessage in error.Value)
                    {
                    <li>@errorMessage.Replace("dto.","").Replace("dto", "")</li>
                    }
                </ul>
            }
        </ul>
    }

@code {
    private string email;
    private string password;
    private string loginResponse;
    private ErrorResponse errorResponse;
    private bool z;

    private async Task HandleLogin()
    {
        var loginDTO = new LoginUserDTO()
        {
            Email = email,
            Password = password
        };

        var json = JsonConvert.SerializeObject(loginDTO);

        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await stateProvider.LoginAsync(content);
        var x = await stateProvider.GetAuthenticationStateAsync();
        //z = x.User.Identity.IsAuthenticated;

     //loginResponse= await response.Content.ReadAsStringAsync();

    }
    
}
