@page "/"
@using MediMove.Shared.Models.DTOs
@using System.Text
@using Azure
@using Newtonsoft.Json
@using JsonSerializer = System.Text.Json.JsonSerializer
@using System.Net
@inject HttpClient httpClient
@inject NavigationManager NavManager

<h3>Login</h3>

<form @onsubmit="HandleLogin">
    <p>
        <label for="username">Username:</label>
        <input id="username" @bind="email"/>
    </p>
    <p>
        <label for="password">Password:</label>
        <input id="password" @bind="password" type="password"/>
    </p>
    <p>
    <button type="submit">Login</button>
    </p>
</form>


    <p>@loginResponse</p>
@if (errorResponse != null && errorResponse.Errors != null)
    {
        <p>Errors:</p>
        <ul>
            @foreach (var error in errorResponse.Errors)
            {
                <li>@error.Key.Replace("dto.",""):</li>
                <ul>
                    @foreach (var errorMessage in error.Value)
                    {
                    <li>@errorMessage.Replace("dto.","").Replace("dto", "")</li>
                    }
                </ul>
            }
        </ul>
    }

@code {
    private string email;
    private string password;
    private string loginResponse;
    private ErrorResponse errorResponse;

    private async Task HandleLogin()
    {
        var loginDTO = new LoginUserDTO()
        {
            Email = email,
            Password = password
        };

        var json = JsonConvert.SerializeObject(loginDTO);

        var content = new StringContent(json, Encoding.UTF8, "application/json");

        var response = await httpClient.PostAsync("/api/v1/Accounts/Login", content);
        var responseContent = await response.Content.ReadAsStringAsync();
        if (response.IsSuccessStatusCode)
        {

            if (responseContent != null && !string.IsNullOrEmpty(responseContent))
            {
                responseContent = await response.Content.ReadAsStringAsync();
                loginResponse = responseContent;
                errorResponse = new ErrorResponse();
            }
            
        }
        else
        {
            responseContent = await response.Content.ReadAsStringAsync();
            errorResponse = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);
            loginResponse = errorResponse.Title;
        }
    }

    public class ErrorResponse
    {
        public string Type { get; set; }
        public string Title { get; set; }
        public int Status { get; set; }
        public string TraceId { get; set; }
        public Dictionary<string, List<string>> Errors { get; set; }
    }

}
