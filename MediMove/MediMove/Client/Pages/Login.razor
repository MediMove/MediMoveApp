@page "/login/"
@using MediMove.Client.temp;
@using MediMove.Shared.Models.DTOs;
@layout AuthLayout
@inject MediMoveAuthenticationStateProvider _stcateProvider
@inject NavigationManager _navigationManager


<div class="row">
    <div class="col-12">
        @*<h4>Login</h4>*@
        <EditForm Model="dto" OnValidSubmit="HandleLogin">
            <RadzenCard Style="background: #2b2b2b">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <label class="text-light">Email</label> <br />
                <RadzenTextBox @bind-Value="dto.Email"></RadzenTextBox> <br />   @*Placeholder="Enter email..."*@
                <label class ="text-light">Password</label> <br />
                <RadzenPassword @bind-Value="dto.Password"></RadzenPassword> <br />   @*Placeholder="Enter password..."*@
                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Login" ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2"/>
            </RadzenCard>

        </EditForm>
    </div>
</div>



@code {
    private LoginUserDTO dto = new();

    private MediMoveResponse<HttpResponseMessage> response = new();

    private async Task HandleLogin()
    {
        
        response = await _stcateProvider.LoginAsync(dto);

        if (response.CorrectResponse is not null)
        {
            var role = await _stcateProvider.GetRole();
            switch (role)
            {
                case "Paramedic":
                    _navigationManager.NavigateTo("/paramedicRazor");
                    break;
                case "Dispatcher":
                    _navigationManager.NavigateTo("/dispacher");
                    break;
                case "Admin":
                    _navigationManager.NavigateTo("/admin");
                    break;
                default:
                    break;
            }
        }
        //else
        //{
        //    NavManager.NavigateTo("", true);
        //}
    }
}